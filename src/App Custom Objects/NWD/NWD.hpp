#pragma once
////////////////////////////////////////////////////////////
// Created by Kornel Domeradzki.
// Copyright © 2018 Kornel Domeradzki. All rights reserved.
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////
#define ARRAY_SIZE 300
#define WIDTH_MULTIPLIER ((SCRWIDTH*15.0f)/1920.0f)
#define HEIGHT_MULTIPLIER ((SCRHEIGHT*300000.0f)/1080.0f)

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "../../App Engine/App.hpp"
#include "../FunctionGraph/FunctionGraph.hpp"
#include "../../DEFINITIONS.h"
#include <SFML/Graphics.hpp>
#include <ctime>

namespace ArktisProductions
{
	////////////////////////////////////////////////////////////
	/// \brief DiagramState class
	///
	////////////////////////////////////////////////////////////
	class NWD : public FunctionGraph
	{
	public:
		////////////////////////////////////////////////////////////
		/// \brief DiagramState constructor
		///
		////////////////////////////////////////////////////////////
		NWD(GameDataRef data);

		////////////////////////////////////////////////////////////
		/// \brief Sets the vertexArray arguments' coordinates
		///
		////////////////////////////////////////////////////////////
		void ArrayInit(bool usingCpp);

		////////////////////////////////////////////////////////////
		/// \brief Calculates the n-th argument of fibonaccis formula
		///
		/// \param int x which argument do you want to calculate
		///
		////////////////////////////////////////////////////////////
		int NWDFunc(int a, int b);

		////////////////////////////////////////////////////////////
		/// \brief Calculates the n-th argument of fibonaccis formula
		///			using MASM instead of C++
		///
		/// \param int x which argument do you want to calculate
		///
		////////////////////////////////////////////////////////////
		int NWDFuncMasm(int a, int b);

	private:
		float *elapsedTimes, calcTime;
	};
}